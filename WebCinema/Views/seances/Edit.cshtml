@model ModelCinema.Models.seance

@{
    ViewBag.Title = "Edit Seances";
}
@using (Html.BeginForm("Edit", "seances", FormMethod.Post))
{
    <div style="height:60px">
        <div style="text-align: left; float: left;">
            <h2>Edit Session</h2>
        </div>

        <div style="text-align: right; float: right; margin-top: 17px; margin-left: 10px">
            @Html.ActionLink("Back to room #" + Model.salle.numero_salle, "BackToSalle", new { id = int.Parse(Session[SessionKeys.salleId].ToString()) }, new { @class = "btn btn-default" })
        </div>

        <div class="btn btn-default" style="
            text-align: right;
            float: right;
            padding: 0px;
            margin: 0px;
            margin-top: 15px;
            margin-left: 10px">
            <input name="command" type="submit" value="submit" class="btn btn-success btn-Save btn-general text-hide" />
        </div>

        <div class="btn btn-default" style="
            text-align: right;
            float: right;
            padding: 0px;
            margin: 0px;
            margin-top: 15px;">
            <input id="btnShowRepeat" onclick="ShowRepeatModal(@Model.id)"
                   class="btn btn-primary btn-Repeat btn-general" type="button" value="" />
        </div>

    </div>

    if (TempData.ContainsKey("Alert"))
    {
        <div class="alert alert-danger" role="alert">@TempData["Alert"]</div>
    }
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })



    @Html.AntiForgeryToken()
    //table pour afficher les info de la seance
    <table class="table">
        @Html.HiddenFor(model => model.id)
        <tr>
            <th>
                @Html.LabelFor(model => model.date_debut)
            </th>
            <th>
                @Html.LabelFor(model => model.date_fin)
            </th>
            <th>
                @Html.LabelFor(model => model.titre_seance)
            </th>
            <th>
                @Html.LabelFor(model => model.salle_id, "Room")
            </th>
        </tr>

        <tr>
            <td style="width: 25%">
                <div style="text-align: left; float: left; width:50%">
                    @Html.EJS().DatePicker("datePickerStart").Value(Model.date_debut).Min(DateTime.Now).Render()
                </div>
                <div style="text-align: right; float: right; width:50%">
                    @Html.EJS().TimePicker("timePickerStart").Value(Model.date_debut).Format("HH:mm").Step(15).Render()
                </div>
                @Html.ValidationMessageFor(model => model.date_debut, "", new { @class = "text-danger" })
            </td>
            <td style="width: 25%">
                <div style="text-align: left; float: left; width:50%">
                    @Html.EJS().DatePicker("datePickerFin").Value(Model.date_fin).Min(DateTime.Now.AddMinutes(10)).Render()
                </div>
                <div style="text-align: right; float: right; width:50%">
                    @Html.EJS().TimePicker("timePickerfin").Value(Model.date_fin).Format("HH:mm").Step(15).Render()
                </div>
                @Html.ValidationMessageFor(model => model.date_fin, "", new { @class = "text-danger" })
            </td>
            <td>
                @Html.EditorFor(model => model.titre_seance, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.titre_seance, "", new { @class = "text-danger" })
            </td>
            <td>
                @Html.DropDownList("salle_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.salle_id, "", new { @class = "text-danger" })
            </td>
        </tr>
    </table>
}



@*table pour afficher la liste des programmation de la seance*@
@using (Html.BeginForm("Edit", "seances", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <table class="table">
        <tr>
            <th>
                Movies
            </th>
            <th>
                Types
            </th>
            <th>
                Lenght
            </th>
            <th>
                Primary
            </th>
            <th>

            </th>
        </tr>

        @foreach (var item in Model.programmations)
        {
            <tr style="@(item.is_primary? "background-color: rgb(0, 165, 255, 0.5);" : "")">
                @Html.HiddenFor(modelItem => item.id)
                <td>
                    @Html.DisplayFor(modelItem => item.film.titre)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.film.type_film.typage)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.film.duree)
                </td>
                <td>
                    @if (item.is_primary)
                    {
                        <b>PRIMARY</b>
                    }
                    else if (item.film.type_film.typage != "Promotionnel")
                    {
                        @Html.ActionLink("make primary", "MakePrimary", new { id = item.id, seanceId = int.Parse(Session[SessionKeys.seanceId].ToString()) }, htmlAttributes: new { @class = "btn btn btn-default" })
                    }
                </td>
                <td>
                    @Html.ActionLink("Remove", "RemoveProgrammation", new { id = item.id, seanceId = int.Parse(Session[SessionKeys.seanceId].ToString()) }, htmlAttributes: new { style = "background: url('../../Image/moins.png'); display: block; height: 24px; width: 24px;", @class = "text-hide" })
                </td>
            </tr>
        }
    </table>
}

@*//table pour le filtre*@
@using (Html.BeginForm("Edit", "seances", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <table class="table">
        <tr>
            <th>
                Title
            </th>
            <th>
                Type
            </th>
            <th>
                Year
            </th>
            <th></th>
            <th></th>
        </tr>
        @using (Html.BeginForm("Filtre", "seances", FormMethod.Post))
        {
            <tr>
                <th>
                    @Html.TextBox("titre", "", new { @class = "form-control" })
                </th>
                <th>
                    @Html.DropDownList("id_type", null, htmlAttributes: new { @class = "form-control" })
                </th>
                <th>
                    @Html.TextBox("yearMin", DateTime.Now.Year - 10, new { @class = "form-control datepicker" })
                </th>
                <th>
                    @Html.TextBox("yearMax", DateTime.Now.Year + 5, new { @class = "form-control datepicker" })
                </th>
                <th>
                    <p>
                        <input name="command" type="submit" value="Filtre" style="background: url('../../Image/search.png'); display: block; height: 24px; width: 24px;" class="text-hide" />
                    </p>
                </th>
            </tr>
        }
    </table>
}

@*//table pour ajouter une nouvelle seance*@
@using (Html.BeginForm("Edit", "seances", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <table class="table">
        <tr>
            <th>
                Movies
            </th>
            <th>
                Years
            </th>
            <th>
                Types
            </th>
            <th>
                Lenght
            </th>
            <th>

            </th>
        </tr>
        @if (ViewBag.filmsFiltred != null)
        {
            foreach (var item in ViewBag.filmsFiltred)
            {
                Html.RenderPartial("FilmsAdder", (ModelCinema.Models.film)item);
            }
        }
    </table>
}

<button onclick="topFunction()" id="myBtn" title="Go to top">Back to Top</button>

<div class="modal" id="myModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Repeating session</h2>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var mybutton = document.getElementById("myBtn");

        window.onscroll = function () { scrollFunction() };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                mybutton.style.display = "block";
            } else {
                mybutton.style.display = "none";
            }
        }

        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }

        function ShowRepeatModal(id) {
            $('.modal-title').html("Repeat Session");
            $.get("@Url.Action("getRepeat","seances")/" + id,
                function (data) { $('.modal-body').html(data); })
            $('#myModal').modal('show');

            $('#myModal').on('hidden.bs.modal', function (e) {
                $('.modal-body').html("");
                $('.modal-title').html("");
            })
        }

        $(document).ready(function () {
            $('body').on("change", "#recurrance", function (evt) {
                switch ($(this).val()) {
                    case "Daily":
                        $('#weeklyOption').hide();
                        break;
                    case "Weekly":
                        $('#weeklyOption').show();
                        break;
                    case "Monthly":
                        $('#weeklyOption').hide();
                        break;
                    case "Yearly":
                        $('#weeklyOption').hide();
                        break;
                    default:
                        break;

                }
            })
        })

    </script>

}
